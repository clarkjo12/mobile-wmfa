'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.error = exports.warn = exports.info = exports.logHistory = exports.resetLog = exports.setLogLevel = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var messageHistory = [];
var logLevel = 'all';

var shouldShowLog = function shouldShowLog(level) {
  var levels = ['all', 'info', 'warn', 'error', 'none'];
  var indexLogLevel = Number(levels.indexOf(logLevel));
  var indexThisLevel = Number(levels.indexOf(level));
  return indexThisLevel >= indexLogLevel;
};

var getLogger = function getLogger(level) {
  return function (message) {

    if (shouldShowLog(level)) console[level](message);

    messageHistory.push({ level: level, message: _chalk2.default.stripColor(message) });
  };
};

var defaultColors = {
  info: 'green',
  warn: 'yellow',
  error: 'red'
};

var colourizer = function colourizer(level) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? defaultColors : arguments[1];
  return function (msg) {
    var color = _chalk2.default[options[level]].bind(_chalk2.default);
    return color(msg);
  };
};

var getFormatter = function getFormatter(level) {
  return function (msg) {
    var promptColors = colourizer(level);
    var messageColors = colourizer(level, _extends({}, defaultColors, { info: 'white' }));

    var pre = [promptColors('indexr'), ' ', _chalk2.default.yellow('>> '), level === 'error' ? promptColors('ERROR: ') : ''].join('');

    return '' + pre + messageColors(msg);
  };
};

var log = function log(level) {
  return function (message) {
    var logger = getLogger(level);
    var format = getFormatter(level);
    logger(format(message));
  };
};

var setLogLevel = exports.setLogLevel = function setLogLevel(level) {
  logLevel = level;
};

var resetLog = exports.resetLog = function resetLog() {
  messageHistory = [];
};

var logHistory = exports.logHistory = function logHistory(level) {
  return level ? messageHistory.filter(function (m) {
    return m.level === level;
  }) : messageHistory;
};

var info = exports.info = log('info');
var warn = exports.warn = log('warn');
var error = exports.error = log('error');